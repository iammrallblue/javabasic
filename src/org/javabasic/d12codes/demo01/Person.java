package org.javabasic.d12codes.demo01;

/*
    1. Override toString()
        a). default return Object address in memory, it is meaningless.
        b). after override, to return content of Instance Variables of Class Person,
            then returns a string representation of the object.
            Format: "Person{ name: " + name + ", age: " + age + " }";

    2. Override equals()
        a). default compare Objects address in memory, it is meaningless.
        b). after override, to compare two objects' attributes, such as variable name and age,
            then return boolean values.
            Formation
        
        NOTICE: (contains polymorphism upcast)
            Object obj = new Person("Abby", 16);
        ** Polymorphism CON: it CANNOT use methods from Subclass Person
          Solve: Downcasting, Class Person back to Class Person;

*/
public class Person {
  private String name;
  private int age;

  public Person() {

  }

  public Person(String name, int age) {
    this.name = name;
    this.age = age;
  }

  // Override toString(), see notes 1 b)
  @Override
  public String toString() {
    return "Person{ name: " + this.name + ", age: " + this.age + " }";
  }

  // toString() Auto-Generated by IDE
  // @Override
  // public String toString() {
  // return String.format("Person [age=%s, name=%s]", age, name);
  // }

  // equals(), by Java 7+
  // @Override
  // public boolean equals(Object obj) {
  // if (this == obj) {
  // return true;
  // }
  // if (obj == null || getClass() != obj.getClass()) {
  // return false;
  // }
  // Person person = (Person) obj;
  // return this.age == person.age && Objects.equals(this.name, person.name);
  // }

  // override equals(), by manual.
  @Override
  public boolean equals(Object obj) {

    // if-statement, If argument is Person itself return true
    if (obj == this) {
      return true;
    }

    // if-statement, if argument is null returns false
    if (obj == null) {
      return false;
    }
    if (obj instanceof Person) {
      // Downcasting Object to Person
      Person person = (Person) obj;
      // compare object's attributes; call method's this(person),
      // another calls methods' person(person2);
      boolean value = this.name.equals(person.name) && this.age == person.age;
      return value;
    } else {
      System.out.println("The Object is NOT Reference Type Person.");
      return false;
    }
  }

  // Auto-generated by IDE
  // @Override
  // public boolean equals(Object obj) {
  // if (this == obj) {
  // return true;
  // }
  // if (obj == null) {
  // return false;
  // }
  // if (getClass() != obj.getClass()) {
  // return false;
  // }
  // Person other = (Person) obj;
  // if (age != other.age) {
  // return false;
  // }
  // if (name == null) {
  // if (other.name != null) {
  // return false;
  // }
  // } else if (!name.equals(other.name)) {
  // return false;
  // }
  // return true;
  // }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public int getAge() {
    return age;
  }

  public void setAge(int age) {
    this.age = age;
  }
}
